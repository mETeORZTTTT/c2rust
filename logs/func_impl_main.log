2025-05-26 21:39:53,578 - INFO - 初始化函数实现生成器
2025-05-26 21:39:53,822 - INFO - ✅ 初始化完成 - 使用模型: gpt-4o
2025-05-26 21:39:53,822 - INFO - 开始从JSON生成函数实现: data/converted_architecture_with_summaries.json
2025-05-26 21:39:53,828 - INFO - 跳过已处理的函数: ZopfliLengthLimitedCodeLengths(const size_t *, int, int, unsigned int *)
2025-05-26 21:39:53,828 - INFO - 跳过已处理的函数: ZopfliCalculateBitLengths(const size_t *, size_t, int, unsigned int *)
2025-05-26 21:39:53,828 - INFO - 跳过已处理的函数: ZopfliLengthsToSymbols(const unsigned int *, size_t, unsigned int, unsigned int *)
2025-05-26 21:39:53,828 - INFO - 跳过已处理的函数: ZopfliLZ77GetByteRange(const ZopfliLZ77Store *, size_t, size_t)
2025-05-26 21:39:53,828 - INFO - 跳过已处理的函数: ZopfliMaxCachedSublen(const ZopfliLongestMatchCache *, size_t, size_t)
2025-05-26 21:39:53,828 - INFO - 跳过已处理的函数: ZopfliSublenToCache(const unsigned short *, size_t, size_t, ZopfliLongestMatchCache *)
2025-05-26 21:39:53,828 - INFO - 跳过已处理的函数: ZopfliCacheToSublen(const ZopfliLongestMatchCache *, size_t, size_t, unsigned short *)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: ZopfliVerifyLenDist(const unsigned char *, size_t, size_t, unsigned short, unsigned short)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: ZopfliResetHash(size_t, ZopfliHash *)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: ZopfliCleanHash(ZopfliHash *)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: ZopfliAllocHash(size_t, ZopfliHash *)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: ZopfliCleanBlockState(ZopfliBlockState *)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: ZopfliCleanCache(ZopfliLongestMatchCache *)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: ZopfliInitCache(size_t, ZopfliLongestMatchCache *)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: ZopfliCleanLZ77Store(ZopfliLZ77Store *)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: ZopfliInitLZ77Store(const unsigned char *, ZopfliLZ77Store *)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: ZopfliCalculateEntropy(const size_t *, size_t, double *)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: ZopfliCopyLZ77Store(const ZopfliLZ77Store *, ZopfliLZ77Store *)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: ZopfliGetLengthSymbol(int)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: ZopfliGetDistSymbol(int)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: AbsDiff(size_t, size_t)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: OptimizeHuffmanForRle(int, size_t *)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: ZopfliGetDistSymbolExtraBits(int)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: ZopfliGetLengthSymbolExtraBits(int)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: LeafComparator(const void *, const void *)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: ExtractBitLengths(Node *, Node *, unsigned int *)
2025-05-26 21:39:53,829 - INFO - 跳过已处理的函数: InitNode(size_t, int, Node *, Node *)
2025-05-26 21:39:53,830 - INFO - 跳过已处理的函数: InitLists(NodePool *, const Node *, int, Node *(*)[2])
2025-05-26 21:39:53,830 - INFO - 跳过已处理的函数: BoundaryPMFinal(Node *(*)[2], Node *, int, NodePool *, int)
2025-05-26 21:39:53,830 - INFO - 跳过已处理的函数: BoundaryPM(Node *(*)[2], Node *, int, NodePool *, int)
2025-05-26 21:39:53,830 - INFO - 跳过已处理的函数: AddHuffmanBits(unsigned int, unsigned int, unsigned char *, unsigned char **, size_t *)
2025-05-26 21:39:53,830 - INFO - 跳过已处理的函数: AddBits(unsigned int, unsigned int, unsigned char *, unsigned char **, size_t *)
2025-05-26 21:39:53,830 - INFO - 跳过已处理的函数: PatchDistanceCodesForBuggyDecoders(unsigned int *)
2025-05-26 21:39:53,830 - INFO - 跳过已处理的函数: GetFixedTree(unsigned int *, unsigned int *)
2025-05-26 21:39:53,830 - INFO - 跳过已处理的函数: ZopfliGetDistExtraBits(int)
2025-05-26 21:39:53,830 - INFO - 跳过已处理的函数: AddBit(int, unsigned char *, unsigned char **, size_t *)
2025-05-26 21:39:53,830 - INFO - 跳过已处理的函数: ZopfliGetDistExtraBitsValue(int)
2025-05-26 21:39:53,830 - INFO - 跳过已处理的函数: GetMatch(const unsigned char *, const unsigned char *, const unsigned char *, const unsigned char *)
2025-05-26 21:39:53,830 - INFO - 跳过已处理的函数: UpdateHashValue(ZopfliHash *, unsigned char)
2025-05-26 21:39:53,830 - INFO - 跳过已处理的函数: TraceBackwards(size_t, const unsigned short *, unsigned short **, size_t *)
2025-05-26 21:39:53,830 - INFO - 跳过已处理的函数: zopfli_min(size_t, size_t)
2025-05-26 21:39:53,830 - INFO - 跳过已处理的函数: GetCostModelMinCost(CostModelFun *, void *)
2025-05-26 21:39:53,830 - INFO - 跳过已处理的函数: GetLengthScore(int, int)
2025-05-26 21:39:53,830 - INFO - 跳过已处理的函数: CalculateStatistics(SymbolStats *)
2025-05-26 21:39:53,830 - INFO - 跳过已处理的函数: GetStatistics(const ZopfliLZ77Store *, SymbolStats *)
2025-05-26 21:39:53,830 - INFO - 跳过已处理的函数: ClearStatFreqs(SymbolStats *)
2025-05-26 21:39:53,831 - INFO - 跳过已处理的函数: Ran(RanState *)
2025-05-26 21:39:53,831 - INFO - 跳过已处理的函数: RandomizeFreqs(RanState *, size_t *, int)
2025-05-26 21:39:53,831 - INFO - 跳过已处理的函数: RandomizeStatFreqs(RanState *, SymbolStats *)
2025-05-26 21:39:53,831 - INFO - 跳过已处理的函数: InitRanState(RanState *)
2025-05-26 21:39:53,831 - INFO - 跳过已处理的函数: AddWeighedStatFreqs(const SymbolStats *, double, const SymbolStats *, double, SymbolStats *)
2025-05-26 21:39:53,831 - INFO - 跳过已处理的函数: CeilDiv(size_t, size_t)
2025-05-26 21:39:53,831 - INFO - 跳过已处理的函数: CopyStats(SymbolStats *, SymbolStats *)
2025-05-26 21:39:53,831 - INFO - 跳过已处理的函数: InitStats(SymbolStats *)
2025-05-26 21:39:53,831 - INFO - 跳过已处理的函数: FindLargestSplittableBlock(size_t, const unsigned char *, const size_t *, size_t, size_t *, size_t *)
2025-05-26 21:39:53,831 - INFO - 跳过已处理的函数: PrintBlockSplitPoints(const ZopfliLZ77Store *, const size_t *, size_t)
2025-05-26 21:39:53,831 - INFO - 跳过已处理的函数: AddSorted(size_t, size_t **, size_t *)
2025-05-26 21:39:53,831 - INFO - 跳过已处理的函数: FindMinimum(FindMinimumFun, void *, size_t, size_t, double *)
2025-05-26 21:39:53,831 - INFO - 找到 102 个可实现函数
2025-05-26 21:39:53,831 - DEBUG - 跳过已处理的函数: ZopfliLengthLimitedCodeLengths(const size_t *, int, int, unsigned int *)
2025-05-26 21:39:53,831 - DEBUG - 跳过已处理的函数: ZopfliCalculateBitLengths(const size_t *, size_t, int, unsigned int *)
2025-05-26 21:39:53,831 - DEBUG - 跳过已处理的函数: ZopfliLengthsToSymbols(const unsigned int *, size_t, unsigned int, unsigned int *)
2025-05-26 21:39:53,832 - DEBUG - 未实现的依赖项: zopfli::ZopfliLZ77GetHistogramAt(const ZopfliLZ77Store *, size_t, size_t *, size_t *)
2025-05-26 21:39:53,832 - INFO - 函数 ZopfliLZ77GetHistogram(const ZopfliLZ77Store *, size_t, size_t, size_t *, size_t *) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:39:53,832 - DEBUG - 跳过已处理的函数: ZopfliLZ77GetByteRange(const ZopfliLZ77Store *, size_t, size_t)
2025-05-26 21:39:53,832 - DEBUG - 未实现的依赖项: zopfli::CalculateBlockSymbolSize(const unsigned int *, const unsigned int *, const ZopfliLZ77Store *, size_t, size_t), zopfli::GetDynamicLengths(const ZopfliLZ77Store *, size_t, size_t, unsigned int *, unsigned int *)
2025-05-26 21:39:53,832 - INFO - 函数 ZopfliCalculateBlockSize(const ZopfliLZ77Store *, size_t, size_t, int) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:39:53,832 - DEBUG - 跳过已处理的函数: ZopfliMaxCachedSublen(const ZopfliLongestMatchCache *, size_t, size_t)
2025-05-26 21:39:53,832 - DEBUG - 跳过已处理的函数: ZopfliSublenToCache(const unsigned short *, size_t, size_t, ZopfliLongestMatchCache *)
2025-05-26 21:39:53,832 - DEBUG - 跳过已处理的函数: ZopfliCacheToSublen(const ZopfliLongestMatchCache *, size_t, size_t, unsigned short *)
2025-05-26 21:39:53,832 - DEBUG - 未实现的依赖项: zopfli::TryGetFromLongestMatchCache(ZopfliBlockState *, size_t, size_t *, unsigned short *, unsigned short *, unsigned short *), zopfli::StoreInLongestMatchCache(ZopfliBlockState *, size_t, size_t, const unsigned short *, unsigned short, unsigned short)
2025-05-26 21:39:53,832 - INFO - 函数 ZopfliFindLongestMatch(ZopfliBlockState *, const ZopfliHash *, const unsigned char *, size_t, size_t, size_t, unsigned short *, unsigned short *, unsigned short *) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:39:53,832 - DEBUG - 跳过已处理的函数: ZopfliVerifyLenDist(const unsigned char *, size_t, size_t, unsigned short, unsigned short)
2025-05-26 21:39:53,832 - INFO - [1/102] 开始生成函数实现: ZopfliWarmupHash(const unsigned char *, size_t, size_t, ZopfliHash *)
2025-05-26 21:39:53,832 - INFO - 为函数 ZopfliWarmupHash(const unsigned char *, size_t, size_t, ZopfliHash *) 启动生成-审核循环
2025-05-26 21:39:53,832 - INFO - 开始第 1/3 轮生成-审核
2025-05-26 21:40:03,136 - INFO - 函数 ZopfliWarmupHash(const unsigned char *, size_t, size_t, ZopfliHash *) 第 1 轮审核通过
2025-05-26 21:40:03,136 - INFO - 检查函数实现的编译状态
2025-05-26 21:40:04,934 - INFO - [1/102] ✅ 成功生成并通过编译: ZopfliWarmupHash(const unsigned char *, size_t, size_t, ZopfliHash *) (审核轮次: 1)
2025-05-26 21:40:04,934 - INFO - [2/102] 开始生成函数实现: ZopfliStoreLitLenDist(unsigned short, unsigned short, size_t, ZopfliLZ77Store *)
2025-05-26 21:40:04,934 - INFO - 为函数 ZopfliStoreLitLenDist(unsigned short, unsigned short, size_t, ZopfliLZ77Store *) 启动生成-审核循环
2025-05-26 21:40:04,934 - INFO - 开始第 1/3 轮生成-审核
2025-05-26 21:40:18,589 - INFO - 函数 ZopfliStoreLitLenDist(unsigned short, unsigned short, size_t, ZopfliLZ77Store *) 第 1 轮审核通过
2025-05-26 21:40:18,589 - INFO - 检查函数实现的编译状态
2025-05-26 21:40:20,347 - INFO - [2/102] ✅ 成功生成并通过编译: ZopfliStoreLitLenDist(unsigned short, unsigned short, size_t, ZopfliLZ77Store *) (审核轮次: 1)
2025-05-26 21:40:20,347 - INFO - [3/102] 开始生成函数实现: ZopfliUpdateHash(const unsigned char *, size_t, size_t, ZopfliHash *)
2025-05-26 21:40:20,347 - INFO - 为函数 ZopfliUpdateHash(const unsigned char *, size_t, size_t, ZopfliHash *) 启动生成-审核循环
2025-05-26 21:40:20,347 - INFO - 开始第 1/3 轮生成-审核
2025-05-26 21:40:38,561 - INFO - 函数 ZopfliUpdateHash(const unsigned char *, size_t, size_t, ZopfliHash *) 第 1 轮审核通过
2025-05-26 21:40:38,561 - INFO - 检查函数实现的编译状态
2025-05-26 21:40:40,421 - INFO - [3/102] ✅ 成功生成并通过编译: ZopfliUpdateHash(const unsigned char *, size_t, size_t, ZopfliHash *) (审核轮次: 1)
2025-05-26 21:40:40,421 - DEBUG - 跳过已处理的函数: ZopfliResetHash(size_t, ZopfliHash *)
2025-05-26 21:40:40,421 - DEBUG - 跳过已处理的函数: ZopfliCleanHash(ZopfliHash *)
2025-05-26 21:40:40,421 - DEBUG - 未实现的依赖项: zopfli::LZ77OptimalRun(ZopfliBlockState *, const unsigned char *, size_t, size_t, unsigned short **, size_t *, unsigned short *, CostModelFun *, void *, ZopfliLZ77Store *, ZopfliHash *, float *), zopfli::GetCostFixed(unsigned int, unsigned int, void *)
2025-05-26 21:40:40,421 - INFO - 函数 ZopfliLZ77OptimalFixed(ZopfliBlockState *, const unsigned char *, size_t, size_t, ZopfliLZ77Store *) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:40:40,421 - DEBUG - 跳过已处理的函数: ZopfliAllocHash(size_t, ZopfliHash *)
2025-05-26 21:40:40,421 - DEBUG - 跳过已处理的函数: ZopfliCleanBlockState(ZopfliBlockState *)
2025-05-26 21:40:40,421 - DEBUG - 跳过已处理的函数: ZopfliCleanCache(ZopfliLongestMatchCache *)
2025-05-26 21:40:40,421 - INFO - [4/102] 开始生成函数实现: ZopfliInitBlockState(const ZopfliOptions *, size_t, size_t, int, ZopfliBlockState *)
2025-05-26 21:40:40,421 - INFO - 为函数 ZopfliInitBlockState(const ZopfliOptions *, size_t, size_t, int, ZopfliBlockState *) 启动生成-审核循环
2025-05-26 21:40:40,421 - INFO - 开始第 1/3 轮生成-审核
2025-05-26 21:40:44,254 - WARNING - 函数 ZopfliInitBlockState(const ZopfliOptions *, size_t, size_t, int, ZopfliBlockState *) 的实现与签名不匹配，尝试修复
2025-05-26 21:40:44,255 - ERROR - [4/102] ❌ 实现失败: ZopfliInitBlockState(const ZopfliOptions *, size_t, size_t, int, ZopfliBlockState *)
2025-05-26 21:40:44,255 - DEBUG - 跳过已处理的函数: ZopfliInitCache(size_t, ZopfliLongestMatchCache *)
2025-05-26 21:40:44,255 - DEBUG - 跳过已处理的函数: ZopfliCleanLZ77Store(ZopfliLZ77Store *)
2025-05-26 21:40:44,255 - DEBUG - 跳过已处理的函数: ZopfliInitLZ77Store(const unsigned char *, ZopfliLZ77Store *)
2025-05-26 21:40:44,255 - DEBUG - 未实现的依赖项: zopfli::ZopfliCalculateBlockSize(const ZopfliLZ77Store *, size_t, size_t, int)
2025-05-26 21:40:44,255 - INFO - 函数 ZopfliCalculateBlockSizeAutoType(const ZopfliLZ77Store *, size_t, size_t) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:40:44,255 - DEBUG - 未实现的依赖项: zopfli::ZopfliFindLongestMatch(ZopfliBlockState *, const ZopfliHash *, const unsigned char *, size_t, size_t, size_t, unsigned short *, unsigned short *, unsigned short *)
2025-05-26 21:40:44,255 - INFO - 函数 ZopfliLZ77Greedy(ZopfliBlockState *, const unsigned char *, size_t, size_t, ZopfliLZ77Store *, ZopfliHash *) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:40:44,255 - DEBUG - 跳过已处理的函数: ZopfliCalculateEntropy(const size_t *, size_t, double *)
2025-05-26 21:40:44,255 - DEBUG - 跳过已处理的函数: ZopfliCopyLZ77Store(const ZopfliLZ77Store *, ZopfliLZ77Store *)
2025-05-26 21:40:44,256 - DEBUG - 未实现的依赖项: zopfli::ZopfliLZ77Greedy(ZopfliBlockState *, const unsigned char *, size_t, size_t, ZopfliLZ77Store *, ZopfliHash *), zopfli::LZ77OptimalRun(ZopfliBlockState *, const unsigned char *, size_t, size_t, unsigned short **, size_t *, unsigned short *, CostModelFun *, void *, ZopfliLZ77Store *, ZopfliHash *, float *), zopfli::GetCostStat(unsigned int, unsigned int, void *), zopfli::ZopfliCalculateBlockSize(const ZopfliLZ77Store *, size_t, size_t, int)
2025-05-26 21:40:44,256 - INFO - 函数 ZopfliLZ77Optimal(ZopfliBlockState *, const unsigned char *, size_t, size_t, int, ZopfliLZ77Store *) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:40:44,256 - DEBUG - 未实现的依赖项: zopfli::SplitCost(size_t, void *), zopfli::EstimateCost(const ZopfliLZ77Store *, size_t, size_t)
2025-05-26 21:40:44,256 - INFO - 函数 ZopfliBlockSplitLZ77(const ZopfliOptions *, const ZopfliLZ77Store *, size_t, size_t **, size_t *) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:40:44,256 - DEBUG - 未实现的依赖项: zopfli::ZopfliInitBlockState(const ZopfliOptions *, size_t, size_t, int, ZopfliBlockState *), zopfli::ZopfliLZ77Greedy(ZopfliBlockState *, const unsigned char *, size_t, size_t, ZopfliLZ77Store *, ZopfliHash *), zopfli::ZopfliBlockSplitLZ77(const ZopfliOptions *, const ZopfliLZ77Store *, size_t, size_t **, size_t *)
2025-05-26 21:40:44,256 - INFO - 函数 ZopfliBlockSplit(const ZopfliOptions *, const unsigned char *, size_t, size_t, size_t, size_t **, size_t *) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:40:44,256 - INFO - [5/102] 开始生成函数实现: ZopfliAppendLZ77Store(const ZopfliLZ77Store *, ZopfliLZ77Store *)
2025-05-26 21:40:44,256 - INFO - 为函数 ZopfliAppendLZ77Store(const ZopfliLZ77Store *, ZopfliLZ77Store *) 启动生成-审核循环
2025-05-26 21:40:44,256 - INFO - 开始第 1/3 轮生成-审核
2025-05-26 21:40:54,432 - INFO - 函数 ZopfliAppendLZ77Store(const ZopfliLZ77Store *, ZopfliLZ77Store *) 第 1 轮审核通过
2025-05-26 21:40:54,432 - INFO - 检查函数实现的编译状态
2025-05-26 21:40:56,115 - INFO - [5/102] ✅ 成功生成并通过编译: ZopfliAppendLZ77Store(const ZopfliLZ77Store *, ZopfliLZ77Store *) (审核轮次: 1)
2025-05-26 21:40:56,121 - INFO - 已处理 5 个函数，中间结果已保存
2025-05-26 21:40:56,121 - DEBUG - 未实现的依赖项: zopfli::AddNonCompressedBlock(const ZopfliOptions *, int, const unsigned char *, size_t, size_t, unsigned char *, unsigned char **, size_t *), zopfli::ZopfliInitBlockState(const ZopfliOptions *, size_t, size_t, int, ZopfliBlockState *), zopfli::ZopfliLZ77OptimalFixed(ZopfliBlockState *, const unsigned char *, size_t, size_t, ZopfliLZ77Store *), zopfli::AddLZ77Block(const ZopfliOptions *, int, int, const ZopfliLZ77Store *, size_t, size_t, size_t, unsigned char *, unsigned char **, size_t *), zopfli::ZopfliBlockSplit(const ZopfliOptions *, const unsigned char *, size_t, size_t, size_t, size_t **, size_t *), zopfli::ZopfliLZ77Optimal(ZopfliBlockState *, const unsigned char *, size_t, size_t, int, ZopfliLZ77Store *), zopfli::ZopfliCalculateBlockSizeAutoType(const ZopfliLZ77Store *, size_t, size_t), zopfli::ZopfliBlockSplitLZ77(const ZopfliOptions *, const ZopfliLZ77Store *, size_t, size_t **, size_t *), zopfli::AddLZ77BlockAutoType(const ZopfliOptions *, int, const ZopfliLZ77Store *, size_t, size_t, size_t, unsigned char *, unsigned char **, size_t *)
2025-05-26 21:40:56,121 - INFO - 函数 ZopfliDeflatePart(const ZopfliOptions *, int, int, const unsigned char *, size_t, size_t, unsigned char *, unsigned char **, size_t *) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:40:56,121 - DEBUG - 未实现的依赖项: zopfli::ZopfliDeflatePart(const ZopfliOptions *, int, int, const unsigned char *, size_t, size_t, unsigned char *, unsigned char **, size_t *)
2025-05-26 21:40:56,121 - INFO - 函数 ZopfliDeflate(const ZopfliOptions *, int, int, const unsigned char *, size_t, unsigned char *, unsigned char **, size_t *) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:40:56,121 - DEBUG - 跳过已处理的函数: ZopfliGetLengthSymbol(int)
2025-05-26 21:40:56,121 - DEBUG - 跳过已处理的函数: ZopfliGetDistSymbol(int)
2025-05-26 21:40:56,121 - DEBUG - 跳过已处理的函数: AbsDiff(size_t, size_t)
2025-05-26 21:40:56,121 - DEBUG - 跳过已处理的函数: OptimizeHuffmanForRle(int, size_t *)
2025-05-26 21:40:56,121 - DEBUG - 跳过已处理的函数: ZopfliGetDistSymbolExtraBits(int)
2025-05-26 21:40:56,121 - DEBUG - 跳过已处理的函数: ZopfliGetLengthSymbolExtraBits(int)
2025-05-26 21:40:56,121 - INFO - [6/102] 开始生成函数实现: CalculateBlockSymbolSizeSmall(const unsigned int *, const unsigned int *, const ZopfliLZ77Store *, size_t, size_t)
2025-05-26 21:40:56,121 - INFO - 为函数 CalculateBlockSymbolSizeSmall(const unsigned int *, const unsigned int *, const ZopfliLZ77Store *, size_t, size_t) 启动生成-审核循环
2025-05-26 21:40:56,121 - INFO - 开始第 1/3 轮生成-审核
2025-05-26 21:41:02,811 - WARNING - 函数 CalculateBlockSymbolSizeSmall(const unsigned int *, const unsigned int *, const ZopfliLZ77Store *, size_t, size_t) 的实现与签名不匹配，尝试修复
2025-05-26 21:41:02,811 - ERROR - [6/102] ❌ 实现失败: CalculateBlockSymbolSizeSmall(const unsigned int *, const unsigned int *, const ZopfliLZ77Store *, size_t, size_t)
2025-05-26 21:41:02,811 - DEBUG - 未实现的依赖项: zopfli::CalculateBlockSymbolSizeSmall(const unsigned int *, const unsigned int *, const ZopfliLZ77Store *, size_t, size_t)
2025-05-26 21:41:02,811 - INFO - 函数 CalculateBlockSymbolSizeGivenCounts(const size_t *, const size_t *, const unsigned int *, const unsigned int *, const ZopfliLZ77Store *, size_t, size_t) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:41:02,811 - DEBUG - 跳过已处理的函数: LeafComparator(const void *, const void *)
2025-05-26 21:41:02,811 - DEBUG - 跳过已处理的函数: ExtractBitLengths(Node *, Node *, unsigned int *)
2025-05-26 21:41:02,811 - DEBUG - 跳过已处理的函数: InitNode(size_t, int, Node *, Node *)
2025-05-26 21:41:02,811 - DEBUG - 跳过已处理的函数: InitLists(NodePool *, const Node *, int, Node *(*)[2])
2025-05-26 21:41:02,811 - DEBUG - 跳过已处理的函数: BoundaryPMFinal(Node *(*)[2], Node *, int, NodePool *, int)
2025-05-26 21:41:02,812 - DEBUG - 跳过已处理的函数: BoundaryPM(Node *(*)[2], Node *, int, NodePool *, int)
2025-05-26 21:41:02,812 - DEBUG - 跳过已处理的函数: AddHuffmanBits(unsigned int, unsigned int, unsigned char *, unsigned char **, size_t *)
2025-05-26 21:41:02,812 - DEBUG - 跳过已处理的函数: AddBits(unsigned int, unsigned int, unsigned char *, unsigned char **, size_t *)
2025-05-26 21:41:02,812 - INFO - [7/102] 开始生成函数实现: EncodeTree(const unsigned int *, const unsigned int *, int, int, int, unsigned char *, unsigned char **, size_t *)
2025-05-26 21:41:02,812 - INFO - 为函数 EncodeTree(const unsigned int *, const unsigned int *, int, int, int, unsigned char *, unsigned char **, size_t *) 启动生成-审核循环
2025-05-26 21:41:02,812 - INFO - 开始第 1/3 轮生成-审核
2025-05-26 21:42:15,903 - WARNING - 函数 EncodeTree(const unsigned int *, const unsigned int *, int, int, int, unsigned char *, unsigned char **, size_t *) 的实现与签名不匹配，尝试修复
2025-05-26 21:42:15,904 - ERROR - [7/102] ❌ 实现失败: EncodeTree(const unsigned int *, const unsigned int *, int, int, int, unsigned char *, unsigned char **, size_t *)
2025-05-26 21:42:15,904 - DEBUG - 未实现的依赖项: zopfli::EncodeTree(const unsigned int *, const unsigned int *, int, int, int, unsigned char *, unsigned char **, size_t *)
2025-05-26 21:42:15,904 - INFO - 函数 CalculateTreeSize(const unsigned int *, const unsigned int *) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:42:15,904 - DEBUG - 跳过已处理的函数: PatchDistanceCodesForBuggyDecoders(unsigned int *)
2025-05-26 21:42:15,905 - DEBUG - 未实现的依赖项: zopfli::CalculateTreeSize(const unsigned int *, const unsigned int *), zopfli::CalculateBlockSymbolSizeGivenCounts(const size_t *, const size_t *, const unsigned int *, const unsigned int *, const ZopfliLZ77Store *, size_t, size_t)
2025-05-26 21:42:15,905 - INFO - 函数 TryOptimizeHuffmanForRle(const ZopfliLZ77Store *, size_t, size_t, const size_t *, const size_t *, unsigned int *, unsigned int *) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:42:15,905 - INFO - [8/102] 开始生成函数实现: ZopfliLZ77GetHistogramAt(const ZopfliLZ77Store *, size_t, size_t *, size_t *)
2025-05-26 21:42:15,905 - INFO - 为函数 ZopfliLZ77GetHistogramAt(const ZopfliLZ77Store *, size_t, size_t *, size_t *) 启动生成-审核循环
2025-05-26 21:42:15,905 - INFO - 开始第 1/3 轮生成-审核
2025-05-26 21:42:19,876 - WARNING - 函数 ZopfliLZ77GetHistogramAt(const ZopfliLZ77Store *, size_t, size_t *, size_t *) 的实现与签名不匹配，尝试修复
2025-05-26 21:42:19,876 - ERROR - [8/102] ❌ 实现失败: ZopfliLZ77GetHistogramAt(const ZopfliLZ77Store *, size_t, size_t *, size_t *)
2025-05-26 21:42:19,877 - DEBUG - 未实现的依赖项: zopfli::ZopfliLZ77GetHistogram(const ZopfliLZ77Store *, size_t, size_t, size_t *, size_t *), zopfli::TryOptimizeHuffmanForRle(const ZopfliLZ77Store *, size_t, size_t, const size_t *, const size_t *, unsigned int *, unsigned int *)
2025-05-26 21:42:19,877 - INFO - 函数 GetDynamicLengths(const ZopfliLZ77Store *, size_t, size_t, unsigned int *, unsigned int *) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:42:19,877 - DEBUG - 跳过已处理的函数: GetFixedTree(unsigned int *, unsigned int *)
2025-05-26 21:42:19,877 - DEBUG - 未实现的依赖项: zopfli::CalculateBlockSymbolSizeSmall(const unsigned int *, const unsigned int *, const ZopfliLZ77Store *, size_t, size_t), zopfli::ZopfliLZ77GetHistogram(const ZopfliLZ77Store *, size_t, size_t, size_t *, size_t *), zopfli::CalculateBlockSymbolSizeGivenCounts(const size_t *, const size_t *, const unsigned int *, const unsigned int *, const ZopfliLZ77Store *, size_t, size_t)
2025-05-26 21:42:19,877 - INFO - 函数 CalculateBlockSymbolSize(const unsigned int *, const unsigned int *, const ZopfliLZ77Store *, size_t, size_t) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:42:19,877 - DEBUG - 未实现的依赖项: zopfli::ZopfliCalculateBlockSizeAutoType(const ZopfliLZ77Store *, size_t, size_t)
2025-05-26 21:42:19,877 - INFO - 函数 EstimateCost(const ZopfliLZ77Store *, size_t, size_t) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:42:19,877 - DEBUG - 未实现的依赖项: zopfli::EstimateCost(const ZopfliLZ77Store *, size_t, size_t)
2025-05-26 21:42:19,877 - INFO - 函数 SplitCost(size_t, void *) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:42:19,877 - INFO - [9/102] 开始生成函数实现: ZopfliGetLengthExtraBits(int)
2025-05-26 21:42:19,877 - INFO - 为函数 ZopfliGetLengthExtraBits(int) 启动生成-审核循环
2025-05-26 21:42:19,877 - INFO - 开始第 1/3 轮生成-审核
2025-05-26 21:43:10,059 - INFO - 函数 ZopfliGetLengthExtraBits(int) 第 1 轮审核通过
2025-05-26 21:43:10,060 - INFO - 检查函数实现的编译状态
2025-05-26 21:43:12,188 - WARNING - [9/102] ⚠️ 编译失败，尝试修复: ZopfliGetLengthExtraBits(int)
2025-05-26 21:43:12,188 - INFO - 开始修复编译错误 (共 2 个)
2025-05-26 21:43:12,188 - INFO - 修复轮次 1/5
2025-05-26 21:43:55,172 - ERROR - 修复过程发生错误: API调用失败: AttributeError: 'NoneType' object has no attribute 'strip'
2025-05-26 21:43:55,174 - ERROR - [9/102] ❌ 编译错误修复失败: ZopfliGetLengthExtraBits(int)
2025-05-26 21:43:55,174 - DEBUG - 跳过已处理的函数: ZopfliGetDistExtraBits(int)
2025-05-26 21:43:55,174 - DEBUG - 未实现的依赖项: zopfli::ZopfliGetLengthExtraBits(int)
2025-05-26 21:43:55,174 - INFO - 函数 GetCostStat(unsigned int, unsigned int, void *) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:43:55,174 - DEBUG - 未实现的依赖项: zopfli::ZopfliGetLengthExtraBits(int)
2025-05-26 21:43:55,174 - INFO - 函数 GetCostFixed(unsigned int, unsigned int, void *) 的依赖项尚未全部实现，暂时跳过
2025-05-26 21:43:55,175 - DEBUG - 跳过已处理的函数: AddBit(int, unsigned char *, unsigned char **, size_t *)
2025-05-26 21:43:55,175 - INFO - [10/102] 开始生成函数实现: AddNonCompressedBlock(const ZopfliOptions *, int, const unsigned char *, size_t, size_t, unsigned char *, unsigned char **, size_t *)
2025-05-26 21:43:55,175 - INFO - 为函数 AddNonCompressedBlock(const ZopfliOptions *, int, const unsigned char *, size_t, size_t, unsigned char *, unsigned char **, size_t *) 启动生成-审核循环
2025-05-26 21:43:55,175 - INFO - 开始第 1/3 轮生成-审核
2025-05-26 21:44:00,222 - WARNING - 函数 AddNonCompressedBlock(const ZopfliOptions *, int, const unsigned char *, size_t, size_t, unsigned char *, unsigned char **, size_t *) 的实现与签名不匹配，尝试修复
2025-05-26 21:44:00,222 - ERROR - [10/102] ❌ 实现失败: AddNonCompressedBlock(const ZopfliOptions *, int, const unsigned char *, size_t, size_t, unsigned char *, unsigned char **, size_t *)
2025-05-26 21:44:00,244 - INFO - 已处理 10 个函数，中间结果已保存
2025-05-26 21:44:00,244 - INFO - [11/102] 开始生成函数实现: ZopfliGetLengthExtraBitsValue(int)
2025-05-26 21:44:00,244 - INFO - 为函数 ZopfliGetLengthExtraBitsValue(int) 启动生成-审核循环
2025-05-26 21:44:00,244 - INFO - 开始第 1/3 轮生成-审核
2025-05-26 21:44:28,057 - INFO - 函数 ZopfliGetLengthExtraBitsValue(int) 第 1 轮审核通过
2025-05-26 21:44:28,058 - INFO - 检查函数实现的编译状态
2025-05-26 21:44:29,836 - WARNING - [11/102] ⚠️ 编译失败，尝试修复: ZopfliGetLengthExtraBitsValue(int)
2025-05-26 21:44:29,837 - INFO - 开始修复编译错误 (共 2 个)
2025-05-26 21:44:29,837 - INFO - 修复轮次 1/5
